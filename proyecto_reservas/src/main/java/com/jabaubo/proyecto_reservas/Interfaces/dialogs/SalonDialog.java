/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JDialog.java to edit this template
 */
package com.jabaubo.proyecto_reservas.Interfaces.dialogs;

import com.jabaubo.proyecto_reservas.Clases.Salon;
import com.jabaubo.proyecto_reservas.Interfaces.InterfazPrincipal;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.ProtocolException;
import java.net.URL;
import javax.swing.JOptionPane;
import javax.swing.plaf.ColorUIResource;
import org.json.JSONException;

/**
 *
 * @author pokem
 */
public class SalonDialog extends javax.swing.JDialog {

    private Salon salon;
    private InterfazPrincipal interfazPrincipal;

    /**
     * Creates new form NewJDialog
     */

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jlTitulo = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jtfNombre = new javax.swing.JTextField();
        jtfAforo = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jbBorrar = new javax.swing.JButton();
        jbGuardar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jlTitulo.setBackground(new java.awt.Color(109, 34, 109));
        jlTitulo.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jlTitulo.setText("Salón");
        jlTitulo.setOpaque(true);

        jLabel1.setText("Nombre");

        jLabel2.setText("Aforo");

        jbBorrar.setText("Borrar");
        jbBorrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbBorrarActionPerformed(evt);
            }
        });

        jbGuardar.setText("Guardar");
        jbGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbGuardarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jlTitulo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jtfAforo)
                            .addComponent(jtfNombre)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jbGuardar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 219, Short.MAX_VALUE)
                        .addComponent(jbBorrar)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jlTitulo, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jtfNombre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jtfAforo, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jbBorrar)
                    .addComponent(jbGuardar))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    //Para insertar
    public SalonDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        this.interfazPrincipal = (InterfazPrincipal) parent;
        initComponents();
        jbBorrar.setEnabled(false);
        this.setLocationRelativeTo(null);
        jlTitulo.setForeground(new ColorUIResource(221, 221, 221));
    }

    //Para actualizar
    public SalonDialog(java.awt.Frame parent, boolean modal, Salon s) {
        super(parent, modal);
        this.interfazPrincipal = (InterfazPrincipal) parent;
        this.salon = s;
        initComponents();
        jtfNombre.setText(s.getNombre());
        jtfAforo.setText(String.valueOf(s.getAforo()));
        this.setLocationRelativeTo(null);
        jlTitulo.setForeground(new ColorUIResource(221, 221, 221));
    }

    private void jbGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbGuardarActionPerformed
        // TODO add your handling code here
        //Comprobamos modo
        if (jtfAforo.getText().toString().matches("[0-9]*")) {
            if (salon != null) {
                Salon actualizado = new Salon(salon.getId(), jtfNombre.getText(), Integer.valueOf(jtfAforo.getText()), salon.getIdRestaurante());
                //Comprobamos si hay diferencias
                if (actualizado.toJson().equals(salon.toJson())) {
                    JOptionPane.showMessageDialog(this, "No hay diferencias", "", JOptionPane.PLAIN_MESSAGE);
                } else {
                    Salon s = salon;
                    s.setAforo(Integer.valueOf(jtfAforo.getText()));
                    s.setNombre(jtfNombre.getText());
                    final String[] responseStr = new String[1];
                    Runnable runnable = new Runnable() {
                        @Override
                        public void run() {
                            // Conectamos a la pagina con el método que queramos
                            try {
                                URL url = new URL("https://reservante.mjhudesings.com/slim/updatesalon");
                                HttpURLConnection connection = (HttpURLConnection) url.openConnection();
                                connection.setRequestMethod("PUT");
                                connection.setDoOutput(true);
                                connection.setRequestProperty("Content-Type", "application/json");
                                connection.setRequestProperty("Accept", "application/json");
                                OutputStream os = connection.getOutputStream();
                                OutputStreamWriter osw = new OutputStreamWriter(os, "UTF-8");
                                osw.write(s.toJson());
                                osw.flush();
                                int responseCode = connection.getResponseCode();
                                //Ver si la respuesta es correcta
                                if (responseCode == HttpURLConnection.HTTP_OK) {
                                    // Si es correcta la leemos
                                    BufferedReader reader = new BufferedReader(new InputStreamReader(connection.getInputStream()));
                                    String line;
                                    StringBuilder response = new StringBuilder();
                                    while ((line = reader.readLine()) != null) {
                                        response.append(line);
                                    }
                                    reader.close();
                                    responseStr[0] = response.toString();
                                    System.out.println(s.toJson());
                                    System.out.println(response.toString());
                                    connection.disconnect();
                                } else {
                                    connection.disconnect();
                                }
                            } catch (MalformedURLException e) {
                                throw new RuntimeException(e);
                            } catch (ProtocolException e) {
                                throw new RuntimeException(e);
                            } catch (IOException e) {
                                throw new RuntimeException(e);
                            }

                        }
                    };
                    Thread thread = new Thread(runnable);
                    thread.start();
                    try {
                        thread.join();
                    } catch (InterruptedException ex) {
                        throw new RuntimeException(ex);
                    }
                    try {
                        //Comprobamos si se ha insertado correctamente el salón
                        System.out.println(responseStr[0]);
                        if (responseStr[0].contains("correctamente")) {
                            JOptionPane.showMessageDialog(interfazPrincipal, "Salón actualizado", "Mensaje", JOptionPane.PLAIN_MESSAGE);
                        } else {
                            JOptionPane.showMessageDialog(interfazPrincipal, "Error al insertar", "Mensaje", JOptionPane.ERROR_MESSAGE);
                        }
                        this.setVisible(false);
                    } catch (JSONException e) {
                        throw new RuntimeException(e);
                    }
                }
            } else {
                final String[] responseStr = new String[1];
                Runnable runnable = new Runnable() {
                    @Override
                    public void run() {
                        // Conectamos a la pagina con el método que queramos
                        try {
                            URL url = new URL("https://reservante.mjhudesings.com/slim/addsalon");
                            HttpURLConnection connection = (HttpURLConnection) url.openConnection();
                            connection.setRequestMethod("POST");
                            connection.setDoOutput(true);
                            connection.setRequestProperty("Content-Type", "application/json");
                            connection.setRequestProperty("Accept", "application/json");
                            OutputStream os = connection.getOutputStream();
                            //Json para insertar
                            OutputStreamWriter osw = new OutputStreamWriter(os, "UTF-8");
                            String jsonStr = "{\n"
                                    + "    \"id_restaurante\":\"#PARAMID#\",\n"
                                    + "    \"nombre\":\"#PARAMNOMBRE#\",\n"
                                    + "    \"aforo\":\"#PARAMAFORO#\"\n"
                                    + "}";
                            jsonStr = jsonStr.replace("#PARAMID#", String.valueOf(interfazPrincipal.getRestaurante()));
                            jsonStr = jsonStr.replace("#PARAMNOMBRE#", jtfNombre.getText());
                            jsonStr = jsonStr.replace("#PARAMAFORO#", String.valueOf(jtfAforo.getText()));
                            osw.write(jsonStr);
                            System.out.println(jsonStr);
                            osw.flush();
                            int responseCode = connection.getResponseCode();
                            //Ver si la respuesta es correcta
                            if (responseCode == HttpURLConnection.HTTP_OK) {
                                // Si es correcta la leemos
                                BufferedReader reader = new BufferedReader(new InputStreamReader(connection.getInputStream()));
                                String line;
                                StringBuilder response = new StringBuilder();
                                while ((line = reader.readLine()) != null) {
                                    response.append(line);
                                }
                                reader.close();
                                responseStr[0] = response.toString();
                                connection.disconnect();
                            } else {
                                connection.disconnect();
                            }
                        } catch (MalformedURLException e) {
                            throw new RuntimeException(e);
                        } catch (ProtocolException e) {
                            throw new RuntimeException(e);
                        } catch (IOException e) {
                            throw new RuntimeException(e);
                        }

                    }
                };
                Thread thread = new Thread(runnable);
                thread.start();
                try {
                    thread.join();
                } catch (InterruptedException ex) {
                    throw new RuntimeException(ex);
                }
                try {
                    //Comprobamos si se ha insertado correctamente
                    System.out.println(responseStr[0]);
                    if (responseStr[0].contains("correctamente")) {
                        JOptionPane.showMessageDialog(interfazPrincipal, "Salón insertado", "Mensaje", JOptionPane.PLAIN_MESSAGE);
                    } else {
                        JOptionPane.showMessageDialog(interfazPrincipal, "Error al insertar", "Mensaje", JOptionPane.ERROR_MESSAGE);
                    }
                    this.setVisible(false);
                } catch (JSONException e) {
                    throw new RuntimeException(e);
                }
            }
        }
        else{
            JOptionPane.showMessageDialog(interfazPrincipal, "Inserte un aforo válido","Error",JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jbGuardarActionPerformed

    private void jbBorrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbBorrarActionPerformed
        // TODO add your handling code here:
        int response = JOptionPane.showConfirmDialog(interfazPrincipal, "¿Seguro que quieres borrar el salón?\nESTA ACCIÓN NO SE PUEDE DESHACER", "Advertencia", JOptionPane.INFORMATION_MESSAGE);
        if (response == JOptionPane.OK_OPTION) {
            final String[] responseStr = new String[1];
            Runnable runnable = new Runnable() {
                @Override
                public void run() {
                    // Conectamos a la pagina con el método que queramos
                    try {
                        URL url = new URL("https://reservante.mjhudesings.com/slim/deletesalon");
                        HttpURLConnection connection = (HttpURLConnection) url.openConnection();
                        connection.setRequestMethod("DELETE");
                        connection.setDoOutput(true);
                        connection.setRequestProperty("Content-Type", "application/json");
                        connection.setRequestProperty("Accept", "application/json");
                        OutputStream os = connection.getOutputStream();
                        OutputStreamWriter osw = new OutputStreamWriter(os, "UTF-8");
                        osw.write(salon.toJson());
                        osw.flush();
                        int responseCode = connection.getResponseCode();
                        //Ver si la respuesta es correcta
                        if (responseCode == HttpURLConnection.HTTP_OK) {
                            // Si es correcta la leemos
                            BufferedReader reader = new BufferedReader(new InputStreamReader(connection.getInputStream()));
                            String line;
                            StringBuilder response = new StringBuilder();
                            while ((line = reader.readLine()) != null) {
                                response.append(line);
                            }
                            reader.close();
                            responseStr[0] = response.toString();
                            System.out.println(salon.toJson());
                            System.out.println("RESPUESTA BORRADO: " + response.toString());
                            connection.disconnect();
                        } else {
                            connection.disconnect();
                        }
                    } catch (MalformedURLException e) {
                        throw new RuntimeException(e);
                    } catch (ProtocolException e) {
                        throw new RuntimeException(e);
                    } catch (IOException e) {
                        throw new RuntimeException(e);
                    }

                }
            };
            Thread thread = new Thread(runnable);
            thread.start();
            try {
                thread.join();
            } catch (InterruptedException ex) {
                throw new RuntimeException(ex);
            }
            try {
                //Comprobamos si se ha borrado crrectamente o no 
                if (responseStr[0].contains("correctamente")) {
                    JOptionPane.showMessageDialog(interfazPrincipal, "Salón borrado", "Mensaje", JOptionPane.PLAIN_MESSAGE);
                } else if (responseStr[0].contains("ERROR2")) {
                    JOptionPane.showMessageDialog(interfazPrincipal, "El salon tiene reservas a futuro\nno se permite borrarlo", "Mensaje", JOptionPane.ERROR_MESSAGE);
                }
                this.setVisible(false);
            } catch (JSONException e) {
                throw new RuntimeException(e);
            }
        }
    }//GEN-LAST:event_jbBorrarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SalonDialog.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SalonDialog.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SalonDialog.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SalonDialog.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                SalonDialog dialog = new SalonDialog(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JButton jbBorrar;
    private javax.swing.JButton jbGuardar;
    private javax.swing.JLabel jlTitulo;
    private javax.swing.JTextField jtfAforo;
    private javax.swing.JTextField jtfNombre;
    // End of variables declaration//GEN-END:variables
}

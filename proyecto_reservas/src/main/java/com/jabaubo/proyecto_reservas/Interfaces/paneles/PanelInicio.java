/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package com.jabaubo.proyecto_reservas.Interfaces.paneles;

import com.jabaubo.proyecto_reservas.Clases.Ocupacion;
import com.jabaubo.proyecto_reservas.Clases.OcupacionRender;
import com.jabaubo.proyecto_reservas.Clases.Reserva;
import com.jabaubo.proyecto_reservas.Interfaces.InterfazPrincipal;
import com.jabaubo.proyecto_reservas.Interfaces.dialogs.ReservasDialog;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.ProtocolException;
import java.net.URL;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.LocalTime;
import java.time.format.DateTimeFormatter;
import java.time.temporal.ChronoUnit;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JList;
import javax.swing.JOptionPane;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

/**
 *
 * @author pokem
 */
public class PanelInicio extends javax.swing.JPanel {

    private InterfazPrincipal interfazPrincipal;

    /**
     * Creates new form PanelInicio
     */
    public PanelInicio(InterfazPrincipal interfazPrincipal) {
        initComponents();
        this.interfazPrincipal = interfazPrincipal;
        jListOcupacionReservas.setCellRenderer(new OcupacionRender());
        jListOcupacionReservas1.setCellRenderer(new OcupacionRender());
        jListOcupacionReservas2.setCellRenderer(new OcupacionRender());
        jListOcupacionReservas3.setCellRenderer(new OcupacionRender());
        cargarDatos();
    }

    public void cargarDatos() {
        LocalDate fecha = LocalDate.now();
        System.out.println("Carga1");
        cargarOcupacion(fecha.toString(), jListOcupacionReservas);
        jlFecha1.setText(fecha.toString());
        System.out.println("Carga2");
        cargarOcupacion(fecha.plusDays(1).toString(), jListOcupacionReservas1);
        jlFecha2.setText(fecha.plusDays(1).toString());
        System.out.println("Carga3");
        cargarOcupacion(fecha.plusDays(2).toString(), jListOcupacionReservas2);
        jlFecha3.setText(fecha.plusDays(2).toString());
        System.out.println("Carga4");
        cargarOcupacion(fecha.plusDays(3).toString(), jListOcupacionReservas3);
        jlFecha4.setText(fecha.plusDays(3).toString());

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jListOcupacionReservas = new JList<>();
        jlFecha1 = new javax.swing.JLabel();
        jlFecha2 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jListOcupacionReservas1 = new JList<>();
        jlFecha3 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jListOcupacionReservas2 = new JList<>();
        jlFecha4 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        jListOcupacionReservas3 = new JList<>();

        jListOcupacionReservas.setBackground(new java.awt.Color(39, 39, 39));
        jListOcupacionReservas.setBorder(new javax.swing.border.MatteBorder(null));
        jListOcupacionReservas.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        jListOcupacionReservas.setOpaque(false);
        jListOcupacionReservas.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jListOcupacionReservasMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jListOcupacionReservas);

        jlFecha1.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jlFecha1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jlFecha1.setText("Fecha:");

        jlFecha2.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jlFecha2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jlFecha2.setText("Fecha:");

        jListOcupacionReservas1.setBackground(new java.awt.Color(39, 39, 39));
        jListOcupacionReservas1.setBorder(new javax.swing.border.MatteBorder(null));
        jListOcupacionReservas1.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        jListOcupacionReservas1.setOpaque(false);
        jListOcupacionReservas1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jListOcupacionReservasMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(jListOcupacionReservas1);

        jlFecha3.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jlFecha3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jlFecha3.setText("Fecha:");

        jListOcupacionReservas2.setBackground(new java.awt.Color(39, 39, 39));
        jListOcupacionReservas2.setBorder(new javax.swing.border.MatteBorder(null));
        jListOcupacionReservas2.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        jListOcupacionReservas2.setOpaque(false);
        jListOcupacionReservas2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jListOcupacionReservas1MouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(jListOcupacionReservas2);

        jlFecha4.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jlFecha4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jlFecha4.setText("Fecha:");

        jListOcupacionReservas3.setBackground(new java.awt.Color(39, 39, 39));
        jListOcupacionReservas3.setBorder(new javax.swing.border.MatteBorder(null));
        jListOcupacionReservas3.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        jListOcupacionReservas3.setOpaque(false);
        jListOcupacionReservas3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jListOcupacionReservasMouseClicked(evt);
            }
        });
        jScrollPane4.setViewportView(jListOcupacionReservas3);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jlFecha1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2)
                    .addComponent(jlFecha2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3)
                    .addComponent(jlFecha3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane4)
                    .addComponent(jlFecha4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jlFecha1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 507, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jlFecha3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane3))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jlFecha2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2)))
                .addGap(6, 6, 6))
            .addGroup(layout.createSequentialGroup()
                .addComponent(jlFecha4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane4)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jListOcupacionReservasMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jListOcupacionReservasMouseClicked
        // TODO add your handling code here:
        JList<Ocupacion> jLista = (JList<Ocupacion>) evt.getSource();
        Ocupacion o = jLista.getSelectedValue();
        ArrayList<Reserva> lista = verReservas(o.getFecha().toString(), o.getHora().toString());
        if (lista.size() <= 0) {
            ReservasDialog reservasDialog = new ReservasDialog(interfazPrincipal, true, o.getFecha(), o.getHora(), interfazPrincipal.getRestaurante());
            reservasDialog.setVisible(true);
            cargarOcupacion(o.getFecha().toString(), jLista);
        } else {
            ReservasDialog reservasDialog = new ReservasDialog(interfazPrincipal, true, o.getFecha(), o.getHora(), lista, interfazPrincipal.getRestaurante());
            reservasDialog.setVisible(true);
            cargarOcupacion(o.getFecha().toString(), jLista);
        }
    }//GEN-LAST:event_jListOcupacionReservasMouseClicked

    private void jListOcupacionReservas1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jListOcupacionReservas1MouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_jListOcupacionReservas1MouseClicked


    /*
    public String leerTramos(String fecha) {
        LocalDate fechaDate = LocalDate.parse(fecha);
        final JSONArray[] horario = {new JSONArray()};
        Runnable runnable = new Runnable() {
            @Override
            public void run() {
                // Conectamos a la pagina con el método que queramos
                try {
                    URL url = new URL("https://reservante.mjhudesings.com/slim/gethorario");
                    HttpURLConnection connection = (HttpURLConnection) url.openConnection();
                    connection.setRequestMethod("POST");
                    connection.setDoOutput(true);
                    connection.setRequestProperty("Content-Type", "application/json");
                    connection.setRequestProperty("Accept", "application/json");
                    OutputStream os = connection.getOutputStream();
                    System.out.println("TETica");
                    OutputStreamWriter osw = new OutputStreamWriter(os, "UTF-8");
                    String jsonFecha = "{\n"
                            + "    \"id\":\"#PARAMID#\"\n"
                            + "}";
                    jsonFecha = jsonFecha.replace("#PARAMID#", String.valueOf(interfazPrincipal.getRestaurante()));
                    osw.write(jsonFecha);
                    osw.flush();
                    int responseCode = connection.getResponseCode();
                    //Ver si la respuesta es correcta
                    if (responseCode == HttpURLConnection.HTTP_OK) {
                        // Si es correcta la leemos
                        BufferedReader reader = new BufferedReader(new InputStreamReader(connection.getInputStream()));
                        String line;
                        StringBuilder response = new StringBuilder();
                        while ((line = reader.readLine()) != null) {
                            response.append(line);
                        }
                        reader.close();
                        System.out.println("Respuesta leer tramos " + response);
                        horario[0] = new JSONObject(response.toString()).getJSONArray("horarios");
                        connection.disconnect();
                    } else {
                        connection.disconnect();
                    }
                } catch (MalformedURLException e) {
                    throw new RuntimeException(e);
                } catch (ProtocolException e) {
                    throw new RuntimeException(e);
                } catch (IOException e) {
                    throw new RuntimeException(e);
                } catch (JSONException e) {
                }

            }
        };
        Thread thread = new Thread(runnable);
        thread.start();
        try {
            thread.join();
        } catch (InterruptedException e) {
            throw new RuntimeException(e);
        }
        int dia = fechaDate.getDayOfWeek().getValue();
        if (horario[0].length() > 0) {
            JSONObject jsonObject;
            jsonObject = (horario[0].getJSONObject(dia - 1));
            LocalTime incremento = leerIncremento();
            LocalDateTime inicio_m;
            LocalDateTime fin_m;
            LocalDateTime inicio_t;
            LocalDateTime fin_t;
            LocalDateTime[] tramos;
            DateTimeFormatter dateTimeFormatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
            try {
                inicio_m = LocalDateTime.parse(fecha + " " + jsonObject.getString("hora_inicio_m"), dateTimeFormatter);
                fin_m = LocalDateTime.parse(fecha + " " + jsonObject.getString("hora_fin_m"), dateTimeFormatter);
                inicio_t = LocalDateTime.parse(fecha + " " + jsonObject.getString("hora_inicio_t"), dateTimeFormatter);
                fin_t = LocalDateTime.parse(fecha + " " + jsonObject.getString("hora_fin_t"), dateTimeFormatter);
                Long tramos_m = inicio_m.until(fin_m, ChronoUnit.MINUTES) / (incremento.getHour() * 60 + incremento.getMinute());
                Long tramos_t = inicio_t.until(fin_t, ChronoUnit.MINUTES) / (incremento.getHour() * 60 + incremento.getMinute());
                tramos = new LocalDateTime[(int) (tramos_m + tramos_t) + 1];
                System.out.println("En teoría se ejecuta " + tramos.length);
            } catch (JSONException e) {
                throw new RuntimeException(e);
            }
            int contador = 0;
            LocalDateTime tramo = inicio_m;
            while (fin_m.isAfter(tramo)) {
                tramos[contador] = tramo;
                System.out.println(tramo + " ejecucion " + (contador + 1) + " tope " + fin_m);
                contador++;
                tramo = tramo.plusHours(incremento.getHour());
                tramo = tramo.plusMinutes(incremento.getMinute());
                if (fin_m.isBefore(tramo)) {
                    break;
                }

            }
            tramo = inicio_t;
            while (fin_t.isAfter(tramo)) {
                tramos[contador] = tramo;
                System.out.println(tramo + " ejecucion " + (contador + 1) + " tope " + fin_t);
                contador++;
                tramo = tramo.plusHours(incremento.getHour());
                tramo = tramo.plusMinutes(incremento.getMinute());
                if (fin_t.isBefore(tramo)) {
                    break;
                }
            }
            String texto = "SELECT '#PARAM1#' AS value ";
            for (LocalDateTime t : tramos) {
                if (t != null) {
                    if (texto.contains("'#PARAM1#'")) {
                        texto = texto.replace("#PARAM1#", t.toLocalTime().toString());
                    } else {
                        texto += " UNION SELECT '" + t.toLocalTime().toString() + "'";
                    }
                }
            }
            System.out.println(texto);
            return texto;
        }
        JOptionPane.showMessageDialog(interfazPrincipal, "Error en el calculo de tramos","Error",JOptionPane.ERROR_MESSAGE);
        return "Error";
    }
     */
    public String leerTramos(String fecha) {
        LocalDate fechaDate = null;
        fechaDate = LocalDate.parse(fecha);
        final JSONArray[] horario = {new JSONArray()};
        //Preparamos la petición
        Runnable runnable = new Runnable() {
            @Override
            public void run() {
                // Conectamos a la pagina con el método que queramos
                try {
                    URL url = new URL("https://reservante.mjhudesings.com/slim/gethorario");
                    HttpURLConnection connection = (HttpURLConnection) url.openConnection();
                    connection.setRequestMethod("POST");
                    connection.setDoOutput(true);
                    connection.setRequestProperty("Content-Type", "application/json");
                    connection.setRequestProperty("Accept", "application/json");
                    //Escribimos el json
                    OutputStream os = connection.getOutputStream();
                    OutputStreamWriter osw = new OutputStreamWriter(os, "UTF-8");
                    String jsonFecha = "{\n"
                            + "    \"id\":\"#PARAMID#\"\n"
                            + "}";
                    jsonFecha = jsonFecha.replace("#PARAMID#", String.valueOf(interfazPrincipal.getRestaurante()));
                    osw.write(jsonFecha);
                    osw.flush();
                    int responseCode = connection.getResponseCode();
//Ver si la respuesta es correcta
                    if (responseCode == HttpURLConnection.HTTP_OK) {
                        // Si es correcta la leemos
                        BufferedReader reader = new BufferedReader(new InputStreamReader(connection.getInputStream()));
                        String line;
                        StringBuilder response = new StringBuilder();
                        while ((line = reader.readLine()) != null) {
                            response.append(line);
                        }
                        reader.close();
                        horario[0] = new JSONObject(response.toString()).getJSONArray("horarios");
                        connection.disconnect();
                    } else {
                        connection.disconnect();
                    }
                } catch (MalformedURLException e) {
                    throw new RuntimeException(e);
                } catch (ProtocolException e) {
                    throw new RuntimeException(e);
                } catch (IOException e) {
                    throw new RuntimeException(e);
                } catch (JSONException e) {
                }

            }
        };
        Thread thread = new Thread(runnable);
        thread.start();
        try {
            thread.join();
        } catch (InterruptedException e) {
            throw new RuntimeException(e);
        }
        //Vemos que dia hay que leer
        int dia = 0;
        dia = fechaDate.getDayOfWeek().getValue();
        JSONObject jsonObject;
        try {
            jsonObject = (horario[0].getJSONObject(dia - 1));
            System.out.println("JSON;" + jsonObject);
        } catch (JSONException e) {
            return null;
        }
        //Leemos la duración de reservas y vemos que sea un valor válido
        LocalTime incremento = leerIncremento();
        if (incremento.getMinute() == 0 && incremento.getHour() == 0) {
            return null;
        }
        if (jsonObject.getInt("cerrado") != 1) {
            LocalDateTime inicio_m;
            LocalDateTime fin_m;
            LocalDateTime inicio_t;
            LocalDateTime fin_t;
            LocalDateTime[] tramos;
            DateTimeFormatter dateTimeFormatter = null;
            dateTimeFormatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
            try {
                //Cargamos los valores
                inicio_m = LocalDateTime.parse(fecha + " " + jsonObject.getString("hora_inicio_m"), dateTimeFormatter);
                fin_m = LocalDateTime.parse(fecha + " " + jsonObject.getString("hora_fin_m"), dateTimeFormatter);
                inicio_t = LocalDateTime.parse(fecha + " " + jsonObject.getString("hora_inicio_t"), dateTimeFormatter);
                fin_t = LocalDateTime.parse(fecha + " " + jsonObject.getString("hora_fin_t"), dateTimeFormatter);
                //Calculamos la cantidad de tramos matutinos
                Long tramos_m = inicio_m.until(fin_m, ChronoUnit.MINUTES) / (incremento.getHour() * 60 + incremento.getMinute());
                System.out.println(tramos_m);
                //Calculamos la cantidad de tramos de la tarde
                Long tramos_t = inicio_t.until(fin_t, ChronoUnit.MINUTES) / (incremento.getHour() * 60 + incremento.getMinute());
                System.out.println(tramos_t);
                tramos = new LocalDateTime[(int) (tramos_m + tramos_t) + 1];
            } catch (JSONException e) {
                throw new RuntimeException(e);
            }
            int contador = 0;
            //Cálculo de tramos matutinos
            LocalDateTime tramo = inicio_m;
            while (fin_m.isAfter(tramo)) {
                tramos[contador] = tramo;
                contador++;
                tramo = tramo.plusHours(incremento.getHour());
                tramo = tramo.plusMinutes(incremento.getMinute());
                if (fin_m.isBefore(tramo) || tramo.until(fin_m, ChronoUnit.MINUTES) < (incremento.getHour() * 60 + incremento.getMinute())) {
                    break;
                }

            }
            //Cálculo de tramos de la tarde
            tramo = inicio_t;
            while (fin_t.isAfter(tramo)) {
                tramos[contador] = tramo;
                contador++;
                tramo = tramo.plusHours(incremento.getHour());
                tramo = tramo.plusMinutes(incremento.getMinute());
                if (fin_t.isBefore(tramo)) {
                    break;
                }
            }
            //Preparamos la consulta
            String texto = "SELECT '#PARAM1#' AS value ";
            for (LocalDateTime t : tramos) {
                if (t != null) {
                    if (texto.contains("#PARAM1#")) {
                        texto = texto.replace("#PARAM1#", t.toLocalTime().toString());
                    } else {
                        texto += " UNION SELECT '" + t.toLocalTime().toString() + "'";
                    }
                }
            }
            //Vemos si se ha preparado correctamente
            if (texto.contains("#PARAM1#")) {
                System.out.println("Me salgo aquí");
                return null;
            }
            return texto;
        }
        return "Error";
    }

    public LocalTime leerIncremento() {
        final LocalTime[] incremento = new LocalTime[1];
        try {
            Runnable runnable = new Runnable() {
                @Override
                public void run() {
                    // Conectamos a la pagina con el método que queramos
                    try {
                        URL url = new URL("https://reservante.mjhudesings.com/slim/getincremento");
                        HttpURLConnection connection = (HttpURLConnection) url.openConnection();
                        connection.setRequestMethod("POST");
                        connection.setDoOutput(true);
                        connection.setRequestProperty("Content-Type", "application/json");
                        connection.setRequestProperty("Accept", "application/json");
                        OutputStream os = connection.getOutputStream();
                        System.out.println("TETica");
                        OutputStreamWriter osw = new OutputStreamWriter(os, "UTF-8");
                        String jsonFecha = "{\n"
                                + "    \"id\":\"#PARAMID#\"\n"
                                + "}";
                        jsonFecha = jsonFecha.replace("#PARAMID#", String.valueOf(interfazPrincipal.getRestaurante()));
                        osw.write(jsonFecha);
                        osw.flush();
                        int responseCode = connection.getResponseCode();
                        //Ver si la respuesta es correcta
                        if (responseCode == HttpURLConnection.HTTP_OK) {
                            // Si es correcta la leemos
                            BufferedReader reader = new BufferedReader(new InputStreamReader(connection.getInputStream()));
                            String line;
                            StringBuilder response = new StringBuilder();
                            while ((line = reader.readLine()) != null) {
                                response.append(line);
                            }
                            reader.close();
                            JSONObject jsonObject = new JSONObject(response.toString()).getJSONObject("resultado");
                            String incrementoStr = jsonObject.getString("duracion_reservas");
                            incremento[0] = LocalTime.parse(incrementoStr);
                            connection.disconnect();
                        } else {
                            connection.disconnect();
                        }
                    } catch (MalformedURLException e) {
                        throw new RuntimeException(e);
                    } catch (ProtocolException e) {
                        throw new RuntimeException(e);
                    } catch (IOException e) {
                        throw new RuntimeException(e);
                    } catch (JSONException e) {
                    }

                }
            };
            Thread thread = new Thread(runnable);
            thread.start();
            thread.join();
        } catch (Exception e) {
            e.printStackTrace();
        }
        return incremento[0];
    }

    public void cargarOcupacion(String fecha, JList<Ocupacion> lista) {
        System.out.println("HOLA BUENAS TARDES");
        String tramos = leerTramos(fecha);
        if (tramos != null) {
            if (!tramos.equals("Error")) {
                DefaultListModel<Ocupacion> modelo = new DefaultListModel<>();
                try {
                    Runnable runnable = new Runnable() {
                        @Override
                        public void run() {
                            // Conectamos a la pagina con el método que queramos
                            try {
                                URL url = new URL("https://reservante.mjhudesings.com/slim/getocupacion");
                                HttpURLConnection connection = (HttpURLConnection) url.openConnection();
                                connection.setRequestMethod("POST");
                                connection.setDoOutput(true);
                                connection.setRequestProperty("Content-Type", "application/json");
                                connection.setRequestProperty("Accept", "application/json");
                                OutputStream os = connection.getOutputStream();
                                System.out.println("TETica");
                                OutputStreamWriter osw = new OutputStreamWriter(os, "UTF-8");
                                String consulta = leerTramos(fecha);
                                String jsonFecha = "{\n"
                                        + "    \"consulta\":\"SELECT range_values.value,salones.nombre,(SELECT COUNT(*) FROM salones WHERE id_restaurante = #PARAMID#) as n_salones,COUNT(reservas.id_salon) AS n_reservas,COALESCE(SUM(reservas.n_personas), 0) AS n_personas,salones.aforo AS aforo  FROM (#TRAMOS#) AS range_values  CROSS JOIN salones on salones.id_salon in (SELECT id_salon FROM salones WHERE id_restaurante = #PARAMID#) LEFT JOIN reservas ON range_values.value = reservas.hora AND reservas.fecha = '#PARAMFECHA#' AND salones.id_salon = reservas.id_salon  GROUP BY range_values.value, salones.id_salon  ORDER BY range_values.value ASC\",\n"
                                        + "    \"fecha\":\"#PARAMFECHA#\",\n"
                                        + "    \"id_restaurante\":\"#PARAMID#\",\n"
                                        + "    \"dia\":\"#PARAMDIA#\"}";
                                jsonFecha = jsonFecha.replace("#TRAMOS#", consulta);
                                jsonFecha = jsonFecha.replace("#PARAMFECHA#", fecha);
                                jsonFecha = jsonFecha.replace("#PARAMID#", String.valueOf(interfazPrincipal.getRestaurante()));
                                jsonFecha = jsonFecha.replace("#PARAMDIA#", String.valueOf(LocalDate.parse(fecha).getDayOfWeek().getValue()));
                                System.out.println(jsonFecha);
                                osw.write(jsonFecha);
                                osw.flush();
                                int responseCode = connection.getResponseCode();
                                //Ver si la respuesta es correcta
                                if (responseCode == HttpURLConnection.HTTP_OK) {
                                    // Si es correcta la leemos 
                                    BufferedReader reader = new BufferedReader(new InputStreamReader(connection.getInputStream()));
                                    String line;
                                    StringBuilder response = new StringBuilder();
                                    while ((line = reader.readLine()) != null) {
                                        response.append(line);
                                    }
                                    reader.close();
                                    System.out.println(response);
                                    if (!response.toString().contains("No hay salones")) {
                                        JSONArray jsonArray = new JSONObject(response.toString()).getJSONArray("reservas");
                                        int n_salones = jsonArray.getJSONObject(0).getInt("n_salones");
                                        System.out.println("tope :" + n_salones);
                                        System.out.println("JSON ARRAY: " + jsonArray);
                                        System.out.println("JSON ARRAY LENGTH: " + jsonArray.length());
                                        System.out.println("Respuesta inicio " + response);
                                        //while ()
                                        for (int i = 0; i < jsonArray.length(); i += n_salones) {
                                            int reservasTotal = 0;
                                            String ocupacion = "";
                                            for (int j = i; j < (i + n_salones); j++) {
                                                JSONObject jsonObject = jsonArray.getJSONObject(j);
                                                String nombreSalon = jsonObject.getString("nombre");
                                                String nReservas = jsonObject.getString("n_reservas");
                                                reservasTotal += Integer.valueOf(nReservas);
                                                String nPersonas = jsonObject.getString("n_personas");
                                                String aforoSalon = jsonObject.getString("aforo");
                                                float ratio = Float.parseFloat(nPersonas) / Float.parseFloat(aforoSalon);
                                                if (ratio < 0.33f) {
                                                    ocupacion += String.format("%s  <font color='#008000'>%s</font>/%s<br></br>", nombreSalon, nPersonas, aforoSalon);
                                                } else if (ratio < 0.66f) {
                                                    ocupacion += String.format("%s  <font color='#FFEB00'>%s</font>/%s<br></br>", nombreSalon, nPersonas, aforoSalon);
                                                } else {
                                                    ocupacion += String.format("%s  <font color='#8B0000'>%s</font>/%s<br></br>", nombreSalon, nPersonas, aforoSalon);
                                                }

                                            }
                                            Ocupacion o = new Ocupacion();
                                            o.setHora(LocalTime.parse(jsonArray.getJSONObject(i).getString("value")));
                                            o.setnReservas(reservasTotal);
                                            o.setOcupacion(ocupacion);
                                            o.setFecha(LocalDate.parse(fecha));
                                            modelo.addElement(o);
                                        }
                                    }
                                }
                                connection.disconnect();
                            } catch (MalformedURLException e) {
                                throw new RuntimeException(e);
                            } catch (ProtocolException e) {
                                System.out.println(e.getMessage());
                                throw new RuntimeException(e);
                            } catch (JSONException e) {
                                throw new RuntimeException(e);
                            } catch (IOException ex) {
                                Logger.getLogger(PanelCalendario.class.getName()).log(Level.SEVERE, null, ex);
                            }

                        }
                    };
                    Thread thread = new Thread(runnable);
                    thread.start();
                    thread.join();
                    lista.setModel(modelo);
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        }
    }

    public ArrayList<Reserva> verReservas(String fecha, String hora) {
        final JSONArray[] jsonArray = new JSONArray[1];
        ArrayList<Reserva> lista = new ArrayList<>();
        try {
            System.out.println("Pa dentro");
            Runnable runnable = new Runnable() {
                @Override
                public void run() {
                    // Conectamos a la pagina con el método que queramos
                    try {
                        URL url = new URL("https://reservante.mjhudesings.com/slim/getreservahora");
                        HttpURLConnection connection = (HttpURLConnection) url.openConnection();
                        connection.setRequestMethod("POST");
                        connection.setDoOutput(true);
                        OutputStream os = connection.getOutputStream();
                        OutputStreamWriter osw = new OutputStreamWriter(os, "UTF-8");
                        String jsonRequest = "{\"fecha\": \"#PARAMFECHA#\",\"hora\":\"#PARAMHORA#\",\"id\":\"#PARAMID#\"}";
                        jsonRequest = jsonRequest.replace("#PARAMFECHA#", fecha);
                        jsonRequest = jsonRequest.replace("#PARAMHORA#", hora);
                        jsonRequest = jsonRequest.replace("#PARAMID#", String.valueOf(interfazPrincipal.getRestaurante()));
                        System.out.println("jsonRequest " + jsonRequest);
                        osw.write(jsonRequest);
                        osw.flush();
                        int responseCode = connection.getResponseCode();
                        System.out.println((responseCode == HttpURLConnection.HTTP_OK) + " " + responseCode);
                        //Ver si la respuesta es correcta
                        if (responseCode == HttpURLConnection.HTTP_OK) {
                            // Si es correcta la leemos
                            BufferedReader reader = new BufferedReader(new InputStreamReader(connection.getInputStream()));
                            String line;
                            StringBuilder response = new StringBuilder();
                            while ((line = reader.readLine()) != null) {
                                response.append(line);
                            }
                            reader.close();
                            jsonArray[0] = new JSONObject(response.toString()).getJSONArray("reservas");
                            for (int i = 0; i < jsonArray[0].length(); i++) {
                                Reserva r = new Reserva();
                                JSONObject json = jsonArray[0].getJSONObject(i);
                                r.setId(json.getInt("id_reserva"));
                                r.setFecha(json.getString("fecha"));
                                r.setId_salon(json.getInt("id_salon"));
                                r.setN_personas(json.getInt("n_personas"));
                                r.setHora(json.getString("hora"));
                                r.setObservaciones(json.getString("observaciones"));
                                r.setNombre_apellidos(json.getString("nombre_apellidos"));
                                r.setTelefono(json.getString("telefono"));
                                r.setEmail(json.getString("email"));
                                lista.add(r);
                            }
                            connection.disconnect();
                        } else {
                            connection.disconnect();
                        }
                    } catch (MalformedURLException e) {
                        throw new RuntimeException(e);
                    } catch (ProtocolException e) {
                        throw new RuntimeException(e);
                    } catch (IOException e) {
                        throw new RuntimeException(e);
                    } catch (JSONException e) {
                    }

                }
            };
            Thread thread = new Thread(runnable);
            thread.start();
            thread.join();
        } catch (Exception e) {
            e.printStackTrace();
        }
        return lista;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JList<Ocupacion> jListOcupacionReservas;
    private javax.swing.JList<Ocupacion> jListOcupacionReservas1;
    private javax.swing.JList<Ocupacion> jListOcupacionReservas2;
    private javax.swing.JList<Ocupacion> jListOcupacionReservas3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JLabel jlFecha1;
    private javax.swing.JLabel jlFecha2;
    private javax.swing.JLabel jlFecha3;
    private javax.swing.JLabel jlFecha4;
    // End of variables declaration//GEN-END:variables
}

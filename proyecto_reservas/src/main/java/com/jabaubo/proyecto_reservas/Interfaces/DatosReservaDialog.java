/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JDialog.java to edit this template
 */
package com.jabaubo.proyecto_reservas.Interfaces;

import com.jabaubo.proyecto_reservas.Clases.Reserva;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.ProtocolException;
import java.net.URL;
import java.text.NumberFormat;
import javax.swing.JOptionPane;
import javax.swing.text.DefaultFormatterFactory;
import javax.swing.text.NumberFormatter;
import org.json.JSONObject;

/**
 *
 * @author pokem
 */
public class DatosReservaDialog extends javax.swing.JDialog {

    /**
     * Creates new form DatosReservaDialog
     */
    private Reserva reserva;
    private String hora;
    private String fecha;

    public DatosReservaDialog(java.awt.Frame parent, boolean modal, String[] salones, String fecha, String hora) {
        super(parent, modal);
        initComponents();
        this.hora = hora;
        this.fecha = fecha;
        NumberFormat numberFormat = NumberFormat.getInstance();
        NumberFormatter formatter = new NumberFormatter(numberFormat);
        formatter.setValueClass(Integer.class);
        formatter.setAllowsInvalid(false);
        formatter.setCommitsOnValidEdit(true);
        for (String s : salones) {
            if (!s.equals("--- Seleccione filtro ---")) {
                jcbSalon.addItem(s);
            }
        }
        jtfComensales.setFormatterFactory(new DefaultFormatterFactory(formatter));
    }

    public DatosReservaDialog(java.awt.Frame parent, boolean modal, Reserva reserva, String[] salones) {
        super(parent, modal);
        initComponents();
        NumberFormat numberFormat = NumberFormat.getInstance();
        NumberFormatter formatter = new NumberFormatter(numberFormat);
        formatter.setValueClass(Integer.class);
        formatter.setAllowsInvalid(false);
        formatter.setCommitsOnValidEdit(true);
        this.reserva = reserva;
        jtfComensales.setFormatterFactory(new DefaultFormatterFactory(formatter));
        jtfCliente.setText(reserva.getNombre_apellidos());
        jtfComensales.setText(String.valueOf(reserva.getN_personas()));
        jtfEmail.setText(reserva.getEmail());
        jtfTelefono.setText(reserva.getTelefono());
        jtfObservaciones.setText(reserva.getObservaciones());
        for (String s : salones) {
            if (!s.equals("--- Seleccione filtro ---")) {
                jcbSalon.addItem(s);
            }
        }
        jtfComensales.setFormatterFactory(new DefaultFormatterFactory(formatter));

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jtfCliente = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jtfTelefono = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jtfEmail = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jtfObservaciones = new javax.swing.JTextField();
        jcbSalon = new javax.swing.JComboBox<>();
        jLabel7 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jtfComensales = new javax.swing.JFormattedTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jLabel1.setText(" jLabel1");

        jLabel2.setText("Nombre y apellidos");

        jtfCliente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jtfClienteActionPerformed(evt);
            }
        });

        jLabel3.setText("Tel√©fono");

        jLabel4.setText("Email");

        jLabel5.setText("Comensales");

        jLabel6.setText("Observaciones");

        jLabel7.setText("Salon");

        jButton1.setText("Guardar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jtfComensales.setText("jFormattedTextField1");
        jtfComensales.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jtfComensalesActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jtfCliente, javax.swing.GroupLayout.PREFERRED_SIZE, 277, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(jtfComensales))
                        .addGroup(layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(jtfEmail, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(layout.createSequentialGroup()
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jcbSalon, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jtfObservaciones, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGap(0, 0, Short.MAX_VALUE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jtfTelefono, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton1, javax.swing.GroupLayout.Alignment.TRAILING))))
                .addContainerGap())
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jcbSalon, jtfCliente, jtfEmail, jtfObservaciones, jtfTelefono});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jtfCliente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jtfTelefono, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jtfEmail, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(jtfComensales, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(jtfObservaciones, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jcbSalon, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton1)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        boolean completo = !jtfCliente.getText().equals("") & !jtfTelefono.getText().equals("") & jcbSalon.getSelectedIndex() >= 0 & !jtfComensales.equals("") & !jtfObservaciones.equals("") & !jtfEmail.equals("");
        if (completo) {
            String cliente = jtfCliente.getText();
            String telefono = jtfTelefono.getText();
            Integer idSalon = Integer.valueOf(jcbSalon.getSelectedItem().toString().substring(0, jcbSalon.getSelectedItem().toString().indexOf("-") - 1));
            Integer comensales;
            if (jtfComensales.getText().contains(".")) {
                comensales = Integer.valueOf(jtfComensales.getText().replaceAll(".", ""));
            } else {
                comensales = Integer.valueOf(jtfComensales.getText());
            }
            String observaciones = jtfObservaciones.getText();
            String email = jtfEmail.getText();
            //Actualizando
            if (reserva != null) {
                int aforoNuevo;
                if (idSalon == reserva.getId_salon()) {
                    aforoNuevo = comensales - reserva.getN_personas();
                } else {
                    aforoNuevo = comensales;
                }
                String salon = jcbSalon.getSelectedItem().toString();
                Integer aforoLibre = Integer.valueOf(salon.substring(salon.indexOf(":") + 2, salon.indexOf("/")));
                System.out.println(String.format("Hay %d quieren meter %d", aforoLibre, aforoNuevo));
                if (aforoNuevo > aforoLibre) {
                    int response = JOptionPane.showConfirmDialog(rootPane, "Vas a exceder el aforo de tu sal√≥n \n¬øEst√°s seguro?");
                    if (response == JOptionPane.OK_OPTION) {
                        String json = crearJsonActualizar();
                        System.out.println(json);
                        Runnable runnable = new Runnable() {
                            @Override
                            public void run() {
                                // Conectamos a la pagina con el m√©todo que queramos
                                try {
                                    URL url = new URL("https://reservante.mjhudesings.com/slim/updatereserva");
                                    HttpURLConnection connection = (HttpURLConnection) url.openConnection();
                                    connection.setRequestMethod("PUT");
                                    connection.setDoOutput(true);
                                    OutputStream os = connection.getOutputStream();
                                    OutputStreamWriter osw = new OutputStreamWriter(os, "UTF-8");
                                    osw.write(json);
                                    osw.flush();
                                    int responseCode = connection.getResponseCode();
                                    //Ver si la respuesta es correcta
                                    if (responseCode == HttpURLConnection.HTTP_OK) {
                                        // Si es correcta la leemos
                                        BufferedReader reader = new BufferedReader(new InputStreamReader(connection.getInputStream()));
                                        String line;
                                        StringBuilder response = new StringBuilder();
                                        while ((line = reader.readLine()) != null) {
                                            response.append(line);
                                        }
                                        reader.close();
                                        System.out.println(response);
                                    }
                                    connection.disconnect();
                                } catch (MalformedURLException e) {
                                    throw new RuntimeException(e);
                                } catch (ProtocolException e) {
                                    throw new RuntimeException(e);
                                } catch (IOException e) {
                                    throw new RuntimeException(e);
                                }
                            }
                        };
                        Thread thread = new Thread(runnable);
                        thread.start();
                        try {
                            thread.join();
                        } catch (InterruptedException e) {
                            throw new RuntimeException(e);
                        }
                    }
                }
                String json = crearJsonActualizar();
                System.out.println("JSON actualizar: " + json);
                if (json.equals("No hay diferencias")) {
                    JOptionPane.showMessageDialog(this.getParent(), "No hay diferencias");
                } else {
                    System.out.println(json);
                    Runnable runnable = new Runnable() {
                        @Override
                        public void run() {
                            // Conectamos a la pagina con el m√©todo que queramos
                            try {
                                URL url = new URL("https://reservante.mjhudesings.com/slim/updatereserva");
                                HttpURLConnection connection = (HttpURLConnection) url.openConnection();
                                connection.setRequestMethod("PUT");
                                connection.setDoOutput(true);
                                OutputStream os = connection.getOutputStream();
                                OutputStreamWriter osw = new OutputStreamWriter(os, "UTF-8");
                                osw.write(json);
                                osw.flush();
                                int responseCode = connection.getResponseCode();
                                //Ver si la respuesta es correcta
                                if (responseCode == HttpURLConnection.HTTP_OK) {
                                    // Si es correcta la leemos
                                    BufferedReader reader = new BufferedReader(new InputStreamReader(connection.getInputStream()));
                                    String line;
                                    StringBuilder response = new StringBuilder();
                                    while ((line = reader.readLine()) != null) {
                                        response.append(line);
                                    }
                                    reader.close();
                                    System.out.println(response);
                                }
                                connection.disconnect();
                            } catch (MalformedURLException e) {
                                throw new RuntimeException(e);
                            } catch (ProtocolException e) {
                                throw new RuntimeException(e);
                            } catch (IOException e) {
                                throw new RuntimeException(e);
                            }
                        }
                    };
                    Thread thread = new Thread(runnable);
                    thread.start();
                    try {
                        thread.join();
                    } catch (InterruptedException e) {
                        throw new RuntimeException(e);
                    }
                }
            } //Insertando
            else {
                int aforoNuevo = comensales;
                String salon = jcbSalon.getSelectedItem().toString();
                Integer aforoLibre = Integer.valueOf(salon.substring(salon.indexOf(":") + 2, salon.indexOf("/")));
                if (aforoNuevo > aforoLibre) {
                    int response = JOptionPane.showConfirmDialog(rootPane, "Vas a exceder el aforo de tu sal√≥n \n¬øEst√°s seguro?");
                    if (response == JOptionPane.OK_OPTION) {
                        String json = crearJsonInsertar();
                        Runnable runnable = new Runnable() {
                                    @Override
                                    public void run() {
                                        // Conectamos a la pagina con el m√©todo que queramos
                                        try {
                                            URL url = new URL("https://reservante.mjhudesings.com/slim/addreserva");
                                            HttpURLConnection connection = (HttpURLConnection) url.openConnection();
                                            connection.setRequestMethod("POST");
                                            connection.setDoOutput(true);
                                            OutputStream os = connection.getOutputStream();
                                            OutputStreamWriter osw = new OutputStreamWriter(os, "UTF-8");
                                            osw.write(json);
                                            osw.flush();
                                            int responseCode = connection.getResponseCode();

                                            //Ver si la respuesta es correcta
                                            if (responseCode == HttpURLConnection.HTTP_OK) {
                                                // Si es correcta la leemos
                                                BufferedReader reader = new BufferedReader(new InputStreamReader(connection.getInputStream()));
                                                String line;
                                                StringBuilder response = new StringBuilder();
                                                while ((line = reader.readLine()) != null) {
                                                    response.append(line);
                                                }
                                                System.out.println(response);
                                                reader.close();
                                                connection.disconnect();
                                            } else {
                                                connection.disconnect();
                                            }
                                        } catch (MalformedURLException e) {
                                            throw new RuntimeException(e);
                                        } catch (ProtocolException e) {
                                            throw new RuntimeException(e);
                                        } catch (IOException e) {
                                            throw new RuntimeException(e);
                                        }

                                    }
                                };
                                Thread thread = new Thread(runnable);
                                thread.start();
                                try {
                                    thread.join();
                                } catch (InterruptedException e) {
                                    throw new RuntimeException(e);
                                }
                    }
                } else {
                    String json = crearJsonInsertar();
                        Runnable runnable = new Runnable() {
                                    @Override
                                    public void run() {
                                        // Conectamos a la pagina con el m√©todo que queramos
                                        try {
                                            URL url = new URL("https://reservante.mjhudesings.com/slim/addreserva");
                                            HttpURLConnection connection = (HttpURLConnection) url.openConnection();
                                            connection.setRequestMethod("POST");
                                            connection.setDoOutput(true);
                                            OutputStream os = connection.getOutputStream();
                                            OutputStreamWriter osw = new OutputStreamWriter(os, "UTF-8");
                                            osw.write(json);
                                            osw.flush();
                                            int responseCode = connection.getResponseCode();

                                            //Ver si la respuesta es correcta
                                            if (responseCode == HttpURLConnection.HTTP_OK) {
                                                // Si es correcta la leemos
                                                BufferedReader reader = new BufferedReader(new InputStreamReader(connection.getInputStream()));
                                                String line;
                                                StringBuilder response = new StringBuilder();
                                                while ((line = reader.readLine()) != null) {
                                                    response.append(line);
                                                }
                                                System.out.println(response);
                                                reader.close();
                                                connection.disconnect();
                                            } else {
                                                connection.disconnect();
                                            }
                                        } catch (MalformedURLException e) {
                                            throw new RuntimeException(e);
                                        } catch (ProtocolException e) {
                                            throw new RuntimeException(e);
                                        } catch (IOException e) {
                                            throw new RuntimeException(e);
                                        }

                                    }
                                };
                                Thread thread = new Thread(runnable);
                                thread.start();
                                try {
                                    thread.join();
                                } catch (InterruptedException e) {
                                    throw new RuntimeException(e);
                                }
                }

            }
            this.dispose();
        } else {
            JOptionPane.showMessageDialog(this.getParent(), "Falta alg√∫n campo por rellenar");
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    public String crearJsonActualizar() {
        //SELECT SUM(n_personas),(SELECT SUM(aforo) FROM salones) FROM reservas WHERE fecha = '2024-04-08' AND hora = '17:00';
        String nombre_n = jtfCliente.getText().toString();
        String tlf_n = jtfTelefono.getText().toString();
        String email_n = jtfEmail.getText().toString();
        String n_personas_n = jtfComensales.getText().toString();
        String id_salon_n = jcbSalon.getSelectedItem().toString().substring(0, jcbSalon.getSelectedItem().toString().indexOf(" -"));
        String observaciones_n = jtfObservaciones.getText().toString();
        if (!nombre_n.equals(reserva.getNombre_apellidos()) || !tlf_n.equals(reserva.getTelefono()) || !email_n.equals(reserva.getEmail()) || !n_personas_n.equals(reserva.getN_personas()) || !id_salon_n.equals(reserva.getId_salon()) || !observaciones_n.equals(reserva.getObservaciones())) {
            String json = "{\n"
                    + "\"id_reserva\": \"#PARAMid_reserva#\",\n"
                    + "\"nombre_apellidos\": \"#PARAMnombre_apellidos#\",\n"
                    + "\"telefono\": \"#PARAMtelefono#\",\n"
                    + "\"email\": \"#PARAMemail#\",\n"
                    + "\"n_personas\": \"#PARAMn_personas#\",\n"
                    + "\"id_salon\": \"#PARAMid_salon#\",\n"
                    + "\"fecha\": \"#PARAMfecha#\",\n"
                    + "\"hora\": \"#PARAMhora#\",\n"
                    + "\"observaciones\": \"#PARAMobservaciones#\"\n"
                    + "}";
            json = json.replace("#PARAMid_reserva#", String.valueOf(reserva.getId()));
            json = json.replace("#PARAMnombre_apellidos#", nombre_n);
            json = json.replace("#PARAMtelefono#", tlf_n);
            json = json.replace("#PARAMemail#", email_n);
            json = json.replace("#PARAMn_personas#", n_personas_n);
            json = json.replace("#PARAMid_salon#", id_salon_n);
            json = json.replace("#PARAMobservaciones#", observaciones_n);
            json = json.replace("#PARAMhora#", reserva.getHora());
            json = json.replace("#PARAMfecha#", reserva.getFecha());
            return json;
        } else {
            return "No hay diferencias";
        }
    }

    public String crearJsonInsertar() {
        String nombre = jtfCliente.getText().toString();
        String tlf = jtfTelefono.getText().toString();
        String email = jtfEmail.getText().toString();
        String n_personas = jtfComensales.getText().toString();
        String id_salon = jcbSalon.getSelectedItem().toString().substring(0, jcbSalon.getSelectedItem().toString().indexOf(" -"));
        String observaciones = jtfObservaciones.getText().toString();
        String json = "{\n"
                + "\"nombre_apellidos\": \"#PARAMnombre_apellidos#\",\n"
                + "\"telefono\": \"#PARAMtelefono#\",\n"
                + "\"email\": \"#PARAMemail#\",\n"
                + "\"n_personas\": \"#PARAMn_personas#\",\n"
                + "\"id_salon\": \"#PARAMid_salon#\",\n"
                + "\"fecha\": \"#PARAMfecha#\",\n"
                + "\"hora\": \"#PARAMhora#\",\n"
                + "\"observaciones\": \"#PARAMobservaciones#\"\n"
                + "}";
        json = json.replace("#PARAMnombre_apellidos#", nombre);
        json = json.replace("#PARAMtelefono#", tlf);
        json = json.replace("#PARAMemail#", email);
        json = json.replace("#PARAMn_personas#", n_personas);
        json = json.replace("#PARAMid_salon#", id_salon);
        json = json.replace("#PARAMobservaciones#", observaciones);
        json = json.replace("#PARAMhora#", hora);
        json = json.replace("#PARAMfecha#", fecha);
        return json;
    }


    private void jtfClienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jtfClienteActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jtfClienteActionPerformed

    private void jtfComensalesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jtfComensalesActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jtfComensalesActionPerformed

    /**
     * @param args the command line arguments
     */

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JComboBox<String> jcbSalon;
    private javax.swing.JTextField jtfCliente;
    private javax.swing.JFormattedTextField jtfComensales;
    private javax.swing.JTextField jtfEmail;
    private javax.swing.JTextField jtfObservaciones;
    private javax.swing.JTextField jtfTelefono;
    // End of variables declaration//GEN-END:variables
}
